/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main;

import au.com.bytecode.opencsv.CSVReader;
import java.awt.Color;
import java.awt.Component;
import java.awt.FileDialog;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;
import javax.swing.text.Highlighter.HighlightPainter;

/**
 *
 * @author khali
 */
public class geneVisFrame extends javax.swing.JFrame {

    /**
     * Creates new form geneVisFrame
     */
    public geneVisFrame() {
        initComponents();
    }

        /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        fastaTextArea = new javax.swing.JTextArea();
        fastaStatButton = new javax.swing.JButton();
        gtfStat = new javax.swing.JButton();
        highlightExons = new javax.swing.JButton();
        fastaTextAreaLabel = new javax.swing.JLabel();
        GTFtextAreaLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        gtfTable = new javax.swing.JTable();
        geneModelComboBox = new javax.swing.JComboBox<>();
        geneModelPanel1 = new main.geneModelPanel();
        jLabel1 = new javax.swing.JLabel();
        geneFileMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        openGTFFileMenuItem = new javax.swing.JMenuItem();
        openFastaFileMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("geneVisualisation - App");
        setBackground(new java.awt.Color(102, 102, 102));

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        fastaTextArea.setColumns(20);
        fastaTextArea.setRows(5);
        jScrollPane1.setViewportView(fastaTextArea);

        fastaStatButton.setText("fastaStat");
        fastaStatButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fastaStatButtonActionPerformed(evt);
            }
        });

        gtfStat.setText("gtfStat");
        gtfStat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gtfStatActionPerformed(evt);
            }
        });

        highlightExons.setText("Highlight Exons");
        highlightExons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highlightExonsActionPerformed(evt);
            }
        });

        fastaTextAreaLabel.setText("FASTA Sequence");

        GTFtextAreaLabel.setText("GTF Content");

        gtfTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        gtfTable.setAutoscrolls(false);
        gtfTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        gtfTable.setDoubleBuffered(true);
        jScrollPane3.setViewportView(gtfTable);

        geneModelComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geneModelComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout geneModelPanel1Layout = new javax.swing.GroupLayout(geneModelPanel1);
        geneModelPanel1.setLayout(geneModelPanel1Layout);
        geneModelPanel1Layout.setHorizontalGroup(
            geneModelPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        geneModelPanel1Layout.setVerticalGroup(
            geneModelPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 32, Short.MAX_VALUE)
        );

        jLabel1.setText("geneModelDisplay");

        jMenu1.setText("File");

        openGTFFileMenuItem.setText("OpenGTF");
        openGTFFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openGTFFileMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(openGTFFileMenuItem);

        openFastaFileMenuItem.setText("OpenFASTA");
        openFastaFileMenuItem.setActionCommand("OpenGeneFile");
        openFastaFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFastaFileMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(openFastaFileMenuItem);

        geneFileMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        geneFileMenuBar1.add(jMenu2);

        setJMenuBar(geneFileMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fastaTextAreaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fastaStatButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(highlightExons)
                        .addGap(135, 135, 135))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(GTFtextAreaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(gtfStat)
                        .addGap(256, 256, 256))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(geneModelPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(geneModelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fastaTextAreaLabel)
                    .addComponent(fastaStatButton)
                    .addComponent(highlightExons))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(GTFtextAreaLabel)
                    .addComponent(gtfStat))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(geneModelPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(geneModelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFastaFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFastaFileMenuItemActionPerformed
        // This action opens the gene fasta file
        FileDialog nameBox;
        nameBox = new FileDialog(this, "Open FASTA file",
                FileDialog.LOAD);
        //Display the filechooser dialog and wait
        nameBox.setVisible(true);
        String fileDirectory = nameBox.getDirectory();
        String filename = nameBox.getFile();
        filename = fileDirectory.concat(filename);
        System.out.println(filename);
        
        try {
            //Read content of the file and append to textArea
            CSVReader reader = new CSVReader(
                new FileReader(filename)
            );
            
            String[] nextLine;
            while ((nextLine = reader.readNext()) != null) {
                   
                        fastaTextArea.append(nextLine[0] + "\n");           
            }
        } catch (IOException e) {
            System.out.println("file not found" + e);
        }
    }//GEN-LAST:event_openFastaFileMenuItemActionPerformed

    private void fastaStatButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fastaStatButtonActionPerformed
        
        //Calculate the average length of the sequences from the fasta file  
        String fastaContent = fastaTextArea.getText(); //get sequences from text area
        //split content into individual lines
        String[] lines = fastaContent.split("\n");
        //Initialize total length(s), count(s) and gc count of sequences
        int totalLength = 0;
        int sequenceCount = 0;
        int totalGCCount = 0;
        //iterate through sequence lines
        StringBuilder currentSequence = new StringBuilder();
        for (String line : lines) {
            if(line.startsWith(">")) { //Get the begining of each sequence
                //Process sequence length and update totalLength, gccount and sequenceCount
                if (!line.startsWith(">")){ //Ignore line starting with '>'
                int[] sequenceFasta = getFastaSequenceLength(
                        currentSequence.toString());
                totalLength += sequenceFasta[0];
                totalGCCount += sequenceFasta[1];
                sequenceCount++;
                
                //Start a new sequence if there is
                currentSequence = new StringBuilder();
                }
            }
            else {
                currentSequence.append(line);
            }
        }
        //Process last sequence
        int[] lastSequenceFasta = getFastaSequenceLength(
                currentSequence.toString());
        totalLength += lastSequenceFasta[0];
        totalGCCount += lastSequenceFasta[1];
        sequenceCount++;
        
        //Calculate average length and GC content
        double averageLength = (double) totalLength/sequenceCount;
        double averageGCContent = (double) totalGCCount/totalLength * 100;
        //display the result
        JOptionPane.showMessageDialog(null,
                "Average sequence length : " + averageLength + "bp" +
                        "\nGC content: " + String.format("%.2f",
                                averageGCContent) + "%");
    }//GEN-LAST:event_fastaStatButtonActionPerformed

    private void openGTFFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openGTFFileMenuItemActionPerformed
        //This method opens a gtf file and display it content in a table
        FileDialog nameBox;
        nameBox = new FileDialog(this, "Open GTF file",
                FileDialog.LOAD);
        //Display the filechooser dialog and wait
        nameBox.setVisible(true);
        String fileDirectory = nameBox.getDirectory();
        String filename = nameBox.getFile();
        filename = fileDirectory.concat(filename);

        try {
                //Read the content of the GTF file
                CSVReader reader = new CSVReader(
                new FileReader(filename)
            );
                    //Create table model to display gtf content
                    DefaultTableModel model = (DefaultTableModel)gtfTable.getModel();
                    
                    //Add columns to the table
                    model.addColumn("Chromosome");
                    model.addColumn("Source");
                    model.addColumn("Feature");
                    model.addColumn("Start");
                    model.addColumn("End");
                    model.addColumn("Score");
                    model.addColumn("Strand");
                    model.addColumn("Frame");
                    model.addColumn("Attribute");
                 
                    //Read each line and add it to the table
                    String[] nextLine;
                    while ((nextLine = reader.readNext()) != null) {
                        if (!nextLine[0].startsWith("##")) {
                            String[] dataRow = nextLine[0].split("\t");
                            model.addRow(dataRow);
                        }
                    }
                    reader.close();
                    pack();
                    
                    //This part of the method extract geneIDs from the gtf table
                    //and populate them into a combobox
                    DefaultTableModel gtfModel = (DefaultTableModel) gtfTable.getModel();
                    int rowCount = gtfModel.getRowCount();
                    //iterate through the rows of the table
                    for (int i = 0; i < rowCount; i++) {
                    String featureType = (String) model.getValueAt(i, 2);
                        if ("gene".equals(featureType)) {
                    //Get the geneIDs from the attribute column        
                    String Attribute = (String) model.getValueAt(i, 8);
                    String[] attributes = Attribute.split(";");
                    for (String attribute : attributes){
                        String[] keyValue = attribute.trim().split("\\s+");
                        if (keyValue.length == 2 && keyValue[0].equals("gene_id")){
                            geneModelComboBox.addItem(keyValue[1]);
                        }
                    }
                }
            }                    
        } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error reading the file: " + e.getMessage());
        }                        
    }//GEN-LAST:event_openGTFFileMenuItemActionPerformed

        /*
        List<GeneModel> geneModels = createGeneModelsFromGTF(gtfTable);
        for (GeneModel geneModel : geneModels){
        jComboBox1.addItem(geneModel);
        }
        */
    /*private List<GeneModel> createGeneModelsFromGTF(JTable gtfTable){
        List<GeneModel> geneModels = new ArrayList<>();
        DefaultTableModel gtfModel = (DefaultTableModel) gtfTable.getModel();
        int rowCount = gtfModel.getRowCount();
        for (int i =0; i< rowCount; i++){
            String featureType = (String) gtfModel.getValueAt(i, 2);
            if ("gene".equals(featureType)){
                String geneId = getGeneIdFromAttributes((String) gtfModel.getValueAt(i, 8));
                GeneModel geneModel = new GeneModel(geneId);  
                geneModel.addExon(new Exon());
            }
        }
        return geneModels;
    }
    private String getGeneIdFromAttributes(String attributes){
        String Attribute = (String) model.getValueAt(i, 8);
        String[] attributes = Attribute.split(";");
        String[] attributes = Attribute.split(";");
        for (String attribute : attributes){
            String[] keyValue = attribue.trim().split("\\s+");
            if (keyValue.length == 2 && keyValue[0].equals("gene_id")){
                return keyValue[1];
            }
        }
        return null;
    }*/
   
    
    private void gtfStatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gtfStatActionPerformed
        
        //Get gtf content from jTable
        DefaultTableModel gtfModel = (DefaultTableModel) gtfTable.getModel();
        int rowCount = gtfModel.getRowCount();
        calculateGeneStatistics(gtfModel, rowCount);
    }//GEN-LAST:event_gtfStatActionPerformed

    private void highlightExonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highlightExonsActionPerformed
        //Highlighting exons on fasta sequence 
        try{
            //Getting exons positions from gtf file and highlighting the fasta sequence
            DefaultTableModel model = (DefaultTableModel) gtfTable.getModel();
            int rowCount = model.getRowCount();
            Highlighter highlight = fastaTextArea.getHighlighter();
            //remove all highlights;
            highlight.removeAllHighlights();
            
            //Change highlight color
            HighlightPainter blue = new DefaultHighlighter.DefaultHighlightPainter(Color.blue);
            
            //Highlight exons in the FASTA content
            for (int i = 0; i < rowCount; i++) {
                String featureType = (String) model.getValueAt(i, 2);
                if ("exon".equals(featureType)) {
                    //get the start and end of every exon
                    int start = Integer.parseInt((String) model.getValueAt(i, 3));
                    int end = Integer.parseInt((String) model.getValueAt(i, 4));
                    highlightExonRange(start, end, blue);
                }
            }          
        }catch(Exception e){
            System.err.println("Error in highlighting exons " + e);
        }       
    }//GEN-LAST:event_highlightExonsActionPerformed

    private void geneModelComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geneModelComboBoxActionPerformed
        // TODO add your handling code here:
        //GeneModel selectedGeneModel = (GeneModel) jComboBox1.getSelectedItem();
        //if (selectedGeneModel != null){
        //    geneModelPanel1.displayExons(selectedGeneModel.getExons());
        //}
    }//GEN-LAST:event_geneModelComboBoxActionPerformed
    
    private void highlightExonRange(int start, int end, HighlightPainter painter){   
        //Get fasta sequence in the text area
        String fastaText = fastaTextArea.getText();
        String[] lines = fastaText.split("\n");
       
        //Ignore header line of the fasta
        for (String line : lines){
            if (line.startsWith(">")){
                continue;
            }
        }
            try {
                //Highlight exons from start to end
                fastaTextArea.getHighlighter().addHighlight(start, end, painter);
            } catch (Exception e) {
                e.printStackTrace();
            }
    }
    private void calculateGeneStatistics(DefaultTableModel gtfModel, int rowCount) {
        //This method calculate basic gene statistics based on the gtf file
        try {
            //Initialize statistics variables
            int totalGenes = 0;
            int totalExons = 0;
            int totalGeneLength = 0;
            int longestGeneLength = Integer.MIN_VALUE;
            int shortestGeneLength = Integer.MAX_VALUE;
            
            int currentGeneExonCount = 0;
            int currentGeneLength = 0;
                       
            //Iterate over the gtfTable
            for (int i = 0; i < rowCount; i++) {
                String featureType = (String) gtfModel.getValueAt(i, 2);
                
                //for exons in the featuretype column get start and end positions
                if ("exon".equals(featureType)) {
                    int start = Integer.parseInt((String) gtfModel.getValueAt(i,
                            3));
                    int end = Integer.parseInt((String) gtfModel.getValueAt(i,
                            4));
                    int exonLength = end - start + 1; //get exon length
                    
                    //Update exons counts and current gene length
                    totalExons++;
                    currentGeneExonCount++;
                   
                    currentGeneLength += exonLength;
                    
                                    } 
                else if ("gene".equals(featureType)) {
                    totalGenes++;
                    
                    //Update longest and shortest gene lengths
                    if (currentGeneLength > longestGeneLength) {
                        longestGeneLength = currentGeneLength;
                    }
                    else {
                        shortestGeneLength = currentGeneLength;
                    }
                    if (currentGeneLength < shortestGeneLength) {
                        shortestGeneLength = currentGeneLength;
                    }
                    totalGeneLength += currentGeneLength;
                    
                    //Reset counters for the next gene
                    currentGeneExonCount = 0;
                    currentGeneLength = 0;
                }
            }
         
            //Calculate averages
            double averageExonsPerGene = totalGenes > 0? (double) totalExons/totalGenes : 0;
            double averageGeneLength = totalGenes > 0? (double) totalGeneLength/totalGenes : 0;
            
            //Display results
            JOptionPane.showMessageDialog(this, 
                    "Total Genes: " + totalGenes + "\n" +
                    "Average Gene Length: " + String.format("%.2f",
                            averageGeneLength) + "bp" + "\n" +
                    "Longest gene: " + (longestGeneLength == Integer.MIN_VALUE ?
                            "N/A" : longestGeneLength + "bp") + "\n" +
                    "Shortest gene: " + (shortestGeneLength == Integer.MAX_VALUE
                            ? "N/A" : shortestGeneLength + "bp") + "\n" +
                    "Average No. of Exons per Gene: " + 
                          String.format("%.2f", averageExonsPerGene));
        
        } catch (Exception e) {
            System.err.println("Error in calculating gene statistics "+ e);
        }
    }
    

    private int[] getFastaSequenceLength(String fastaSequence) {
        //Calculate length of the fasta sequence and GC content
        
        //Concatenate fasta sequence to remove tabs, spaces and newlines
        String sequence = fastaSequence.replaceAll("\\s", "");
        
        //Exclude headers
        sequence = sequence.replaceAll(">", "");
        int sequenceLength = sequence.length();
        int GCcount = gcContentCount(sequence);
        
        return new int[]{sequenceLength, GCcount};
    }
    
    private int gcContentCount(String sequence) {
        //count number of Gs and Cs in the sequence
        int GCcount = 0;
        for (char base : sequence.toCharArray()) {
            if (base == 'G' || base == 'C') {
                GCcount++;
            }
        }
        return GCcount;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(geneVisFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(geneVisFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(geneVisFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(geneVisFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new geneVisFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel GTFtextAreaLabel;
    private javax.swing.JButton fastaStatButton;
    private javax.swing.JTextArea fastaTextArea;
    private javax.swing.JLabel fastaTextAreaLabel;
    private javax.swing.JMenuBar geneFileMenuBar1;
    private javax.swing.JComboBox<String> geneModelComboBox;
    private main.geneModelPanel geneModelPanel1;
    private javax.swing.JButton gtfStat;
    private javax.swing.JTable gtfTable;
    private javax.swing.JButton highlightExons;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuItem openFastaFileMenuItem;
    private javax.swing.JMenuItem openGTFFileMenuItem;
    // End of variables declaration//GEN-END:variables
}
